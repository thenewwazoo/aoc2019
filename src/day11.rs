use std::collections::HashMap;
use std::fmt::Write;
use std::sync::mpsc::channel;
use std::thread::spawn;

use crate::day9::build_machine;

pub type Point = (i64, i64);

#[derive(Clone, Copy, Debug)]
enum Color {
    Black = 0,
    White = 1,
}

impl Default for Color {
    fn default() -> Self {
        Color::Black
    }
}

impl std::fmt::Display for Color {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}",
            match self {
                Color::Black => " ",
                Color::White => "#",
            }
        )
    }
}

#[derive(Clone, Copy, Debug)]
enum Dir {
    U,
    D,
    L,
    R,
}

impl Dir {
    fn turn(self, rot: Rot) -> Self {
        match (self, rot) {
            (Dir::U, Rot::L) => Dir::L,
            (Dir::L, Rot::L) => Dir::D,
            (Dir::D, Rot::L) => Dir::R,
            (Dir::R, Rot::L) => Dir::U,
            (Dir::U, Rot::R) => Dir::R,
            (Dir::R, Rot::R) => Dir::D,
            (Dir::D, Rot::R) => Dir::L,
            (Dir::L, Rot::R) => Dir::U,
        }
    }
}

#[derive(Clone, Copy, Debug)]
enum Rot {
    L,
    R,
}

pub fn run() -> Result<String, ()> {
    let mut map: HashMap<Point, Color> = HashMap::new();

    let mut location: Point = (0, 0);
    let mut direction = Dir::U;

    map.insert(location, Color::White);

    println!("hello, world");

    let mut mem = PROGMEM.to_vec();
    mem.extend(vec![0; 1024]);
    let mut machine = build_machine(mem);
    let (tx, rx) = channel();
    machine.wire_output(tx);
    let tx = machine.wire_input();

    let t_h = spawn(move || machine.run());

    while let Ok(_) = tx.send({
        let e = map.entry(location).or_insert(Color::Black);
        println!("{:?} {:?} {:?}", location, direction, *e);
        *e as i64
    }) {
        if let Ok(c) = rx.recv() {
            println!("c {}", c);
            match c {
                0 => *map.get_mut(&location).unwrap() = Color::Black,
                1 => *map.get_mut(&location).unwrap() = Color::White,
                c @ _ => panic!("bad color: {}", c),
            };
        } else {
            println!("color read failed");
            break;
        }
        if let Ok(r) = rx.recv() {
            println!("r {}", r);
            match r {
                0 => direction = direction.turn(Rot::L),
                1 => direction = direction.turn(Rot::R),
                t @ _ => panic!("bad direction: {}", t),
            };
        } else {
            println!("rot read failed");
            break;
        }
        match direction {
            Dir::U => location.1 += 1,
            Dir::D => location.1 -= 1,
            Dir::R => location.0 += 1,
            Dir::L => location.0 -= 1,
        };
    }

    let _end_mem = t_h.join().unwrap();
    print_map(&map, true);
    Ok(format!("{}", map.len()))
}

pub fn print_map<T>(map: &HashMap<Point, T>, inverted: bool)
where
    T: std::fmt::Debug + std::fmt::Display + Default + Copy,
{
    let mut buf = String::from("\x1B[2J\x1B[H");
    //let mut buf = String::new();

    let (max_y, max_x) = (
        map.keys().map(|p| p.1).max().unwrap(),
        map.keys().map(|p| p.0).max().unwrap(),
    );
    let (min_y, min_x) = (
        map.keys().map(|p| p.1).min().unwrap(),
        map.keys().map(|p| p.0).min().unwrap(),
    );

    for y in {
        if inverted {
            (min_y..=max_y).rev().collect::<Vec<i64>>().into_iter()
        } else {
            (min_y..=max_y).collect::<Vec<i64>>().into_iter()
        }
    } {
        for x in min_x..=max_x {
            write!(
                buf,
                "{}",
                map.get(&(x, y))
                    .cloned()
                    .or(Some(Default::default()))
                    .unwrap()
            )
            .unwrap();
        }
        write!(buf, "\n").unwrap();
    }
    print!("{}\n", buf);
}

const PROGMEM: &[i64] = &[
    3,
    8, // 0
    1005,
    8,
    338, // 2
    1106,
    0,
    11, // 5
    0,
    0,
    0,
    104,
    1, // 11
    104,
    0, // 13
    3,
    8, // 15
    102,
    -1,
    8,
    10, // 17
    1001,
    10,
    1,
    10, // 21
    4,
    10, // 25
    1008,
    8,
    1,
    10, // 29
    4,
    10, // 31
    1002,
    8,
    1,
    29, // 35
    2,
    105,
    19,
    10, // 39
    1006,
    0,
    52, // 43
    1,
    1009,
    7,
    10,
    1006,
    0,
    6,
    3,
    8,
    102,
    -1,
    8,
    10,
    101,
    1,
    10,
    10,
    4,
    10,
    108,
    1,
    8,
    10,
    4,
    10,
    1001,
    8,
    0,
    64,
    2,
    1002,
    19,
    10,
    1,
    8,
    13,
    10,
    1,
    1108,
    16,
    10,
    2,
    1003,
    1,
    10,
    3,
    8,
    102,
    -1,
    8,
    10,
    1001,
    10,
    1,
    10,
    4,
    10,
    1008,
    8,
    1,
    10,
    4,
    10,
    1002,
    8,
    1,
    103,
    1006,
    0,
    10,
    2,
    109,
    16,
    10,
    1,
    102,
    11,
    10,
    2,
    6,
    13,
    10,
    3,
    8,
    102,
    -1,
    8,
    10,
    1001,
    10,
    1,
    10,
    4,
    10,
    1008,
    8,
    0,
    10,
    4,
    10,
    1002,
    8,
    1,
    140,
    2,
    102,
    8,
    10,
    2,
    4,
    14,
    10,
    1,
    8,
    19,
    10,
    1006,
    0,
    24,
    3,
    8,
    1002,
    8,
    -1,
    10,
    101,
    1,
    10,
    10,
    4,
    10,
    1008,
    8,
    0,
    10,
    4,
    10,
    1001,
    8,
    0,
    177,
    1006,
    0,
    16,
    1,
    1007,
    17,
    10,
    3,
    8,
    102,
    -1,
    8,
    10,
    1001,
    10,
    1,
    10,
    4,
    10,
    108,
    1,
    8,
    10,
    4,
    10,
    101,
    0,
    8,
    205,
    3,
    8,
    1002,
    8,
    -1,
    10,
    1001,
    10,
    1,
    10,
    4,
    10,
    1008,
    8,
    0,
    10,
    4,
    10,
    102,
    1,
    8,
    228,
    1,
    1005,
    1,
    10,
    1,
    9,
    1,
    10,
    3,
    8,
    102,
    -1,
    8,
    10,
    101,
    1,
    10,
    10,
    4,
    10,
    1008,
    8,
    1,
    10,
    4,
    10,
    1002,
    8,
    1,
    258,
    3,
    8,
    1002,
    8,
    -1,
    10,
    1001,
    10,
    1,
    10,
    4,
    10,
    108,
    0,
    8,
    10,
    4,
    10,
    102,
    1,
    8,
    279,
    3,
    8,
    102,
    -1,
    8,
    10,
    1001,
    10,
    1,
    10,
    4,
    10,
    108,
    0,
    8,
    10,
    4,
    10,
    102,
    1,
    8,
    301,
    1,
    3,
    17,
    10,
    2,
    7,
    14,
    10,
    2,
    6,
    18,
    10,
    1,
    1001,
    17,
    10,
    101,
    1,
    9,
    9,
    1007,
    9,
    1088,
    10,
    1005,
    10,
    15,
    99,
    109,
    660,
    104,
    0,
    104,
    1,
    21102,
    1,
    48092525312,
    1,
    21101,
    355,
    0,
    0,
    1106,
    0,
    459,
    21102,
    665750184716,
    1,
    1,
    21102,
    366,
    1,
    0,
    1106,
    0,
    459,
    3,
    10,
    104,
    0,
    104,
    1,
    3,
    10,
    104,
    0,
    104,
    0,
    3,
    10,
    104,
    0,
    104,
    1,
    3,
    10,
    104,
    0,
    104,
    1,
    3,
    10,
    104,
    0,
    104,
    0,
    3,
    10,
    104,
    0,
    104,
    1,
    21102,
    1,
    235324768296,
    1,
    21101,
    0,
    413,
    0,
    1105,
    1,
    459,
    21101,
    3263212736,
    0,
    1,
    21102,
    424,
    1,
    0,
    1106,
    0,
    459,
    3,
    10,
    104,
    0,
    104,
    0,
    3,
    10,
    104,
    0,
    104,
    0,
    21102,
    1,
    709496824676,
    1,
    21101,
    447,
    0,
    0,
    1105,
    1,
    459,
    21102,
    988220904204,
    1,
    1,
    21102,
    1,
    458,
    0,
    1106,
    0,
    459,
    99,
    109,
    2,
    21201,
    -1,
    0,
    1,
    21102,
    40,
    1,
    2,
    21102,
    490,
    1,
    3,
    21102,
    1,
    480,
    0,
    1105,
    1,
    523,
    109,
    -2,
    2106,
    0,
    0,
    0,
    1,
    0,
    0,
    1,
    109,
    2,
    3,
    10,
    204,
    -1,
    1001,
    485,
    486,
    501,
    4,
    0,
    1001,
    485,
    1,
    485,
    108,
    4,
    485,
    10,
    1006,
    10,
    517,
    1101,
    0,
    0,
    485,
    109,
    -2,
    2105,
    1,
    0,
    0,
    109,
    4,
    2101,
    0,
    -1,
    522,
    1207,
    -3,
    0,
    10,
    1006,
    10,
    540,
    21102,
    0,
    1,
    -3,
    22101,
    0,
    -3,
    1,
    22102,
    1,
    -2,
    2,
    21102,
    1,
    1,
    3,
    21101,
    559,
    0,
    0,
    1106,
    0,
    564,
    109,
    -4,
    2105,
    1,
    0,
    109,
    5,
    1207,
    -3,
    1,
    10,
    1006,
    10,
    587,
    2207,
    -4,
    -2,
    10,
    1006,
    10,
    587,
    22102,
    1,
    -4,
    -4,
    1105,
    1,
    655,
    22101,
    0,
    -4,
    1,
    21201,
    -3,
    -1,
    2,
    21202,
    -2,
    2,
    3,
    21102,
    606,
    1,
    0,
    1105,
    1,
    564,
    21202,
    1,
    1,
    -4,
    21101,
    0,
    1,
    -1,
    2207,
    -4,
    -2,
    10,
    1006,
    10,
    625,
    21102,
    0,
    1,
    -1,
    22202,
    -2,
    -1,
    -2,
    2107,
    0,
    -3,
    10,
    1006,
    10,
    647,
    22101,
    0,
    -1,
    1,
    21101,
    647,
    0,
    0,
    105,
    1,
    522,
    21202,
    -2,
    -1,
    -2,
    22201,
    -4,
    -2,
    -4,
    109,
    -5,
    2106,
    0,
    0,
];
